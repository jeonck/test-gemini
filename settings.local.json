{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "env": {
    "NODE_ENV": "development",
    "VITE_APP_NAME": "Claude Code Project"
  },
  "includeCoAuthoredBy": true,
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Bash(git remote add:*)",
      "Bash(git status:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(npm install:*)",
      "Bash(npm ci:*)",
      "Bash(npm run build:*)",
      "Bash(npm run preview:*)",
      "Bash(npm run dev:*)",
      "Bash(npm cache verify:*)",
      "Bash(yarn:*)",
      "Bash(pnpm:*)",
      "Bash(sleep:*)",
      "Bash(cd:*)",
      "Bash(ls:*)",
      "Bash(pwd:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(cat:*)",
      "Bash(echo:*)",
      "Bash(touch:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "mcp__github__get_me",
      "mcp__github__create_repository",
      "mcp__github__list_workflow_runs",
      "mcp__github__get_job_logs",
      "mcp__github__get_workflow_run",
      "mcp__github__list_branches",
      "mcp__github__get_pull_request",
      "mcp__github__create_pull_request",
      "mcp__github__list_issues",
      "mcp__github__create_issue",
      "Write",
      "MultiEdit",
      "Read",
      "Glob",
      "Grep",
      "TodoWrite",
      "WebFetch",
      "Bash(npm cache clean:*)"
    ],
    "deny": [
      "Bash(rm -rf /:*)",
      "Bash(sudo:*)",
      "Bash(su:*)"
    ],
    "ask": [
      "Bash(docker:*)",
      "Bash(kubectl:*)"
    ],
    "defaultMode": "acceptEdits"
  },
  "enableAllProjectMcpServers": true,
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo '‚úÖ File written successfully'",
            "timeout": 5
          }
        ]
      },
      {
        "matcher": "Bash(git commit:*)",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'üìù Git commit completed'",
            "timeout": 5
          }
        ]
      },
      {
        "matcher": "mcp__github__create_repository",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'üöÄ GitHub repository created successfully'",
            "timeout": 5
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash(npm run build:*)",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'üî® Starting build process...'",
            "timeout": 5
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "echo '‚ö° Claude Code Automation Active'",
    "padding": 2
  },
  "sandbox": {
    "network": {
      "allow": [
        {
          "host": "github.com",
          "port": 443
        },
        {
          "host": "api.github.com",
          "port": 443
        },
        {
          "host": "raw.githubusercontent.com",
          "port": 443
        },
        {
          "host": "registry.npmjs.org",
          "port": 443
        },
        {
          "host": "cdn.jsdelivr.net",
          "port": 443
        }
      ]
    },
    "filesystem": {
      "allowedWriteDirs": [
        "./",
        "../",
        "~/projects",
        "~/workspace",
        "~/dev"
      ]
    }
  },
  "spinnerTipsEnabled": true,
  "_description": "Universal Claude Code automation settings - Copy this file to .claude/settings.local.json in any project",
  "_automation_notes": {
    "vite_react_tailwind_workflow": {
      "description": "Complete automation for Vite + React + Tailwind projects",
      "steps": [
        "1. Create directory structure (mkdir -p react-app/src react-app/public .github/workflows)",
        "2. Generate all config files (package.json, vite.config.js, etc.)",
        "3. Create React components and HTML templates",
        "4. Generate GitHub Actions workflow",
        "5. Initialize git and create initial commit",
        "6. Create GitHub repository via MCP",
        "7. Push to remote repository",
        "8. Install npm dependencies",
        "9. Run build test",
        "10. Commit package-lock.json (CRITICAL for GitHub Actions)",
        "11. Verify deployment success"
      ],
      "critical_points": [
        "Always commit package-lock.json after npm install",
        "Ensure public/vite.svg exists to prevent 404 errors",
        "Set correct base path in vite.config.js",
        "Use working-directory: ./react-app in GitHub Actions"
      ]
    }
  }
}